{"version":3,"sources":["store.js"],"names":["_vuex","require","_firebaseConfig","createStore","state","users","mutations","setUsers","addUser","user","push","removeUser","userId","filter","id","actions","fetchUsers","_ref","commit","snapshot","regeneratorRuntime","async","_context","prev","next","awrap","collection","get","sent","docs","map","doc","_objectSpread","data","stop","_ref2","docRef","_context2","db","add","_ref3","_context3"],"mappings":"2FAEA,IAAAA,MAAAC,QAAA,QACAC,gBAAAD,QAAA,6vBAEe,EAAAD,MAAAG,aAAY,CACvBC,MAAO,CAJXC,MAAA,IACAC,UAAA,CAOQC,SAPR,SAOiBH,EAAOC,GACZD,EAAMC,MAAQA,GAElBG,QAVR,SAUgBJ,EAAOK,GACXL,EAAMC,MAAMK,KAAKD,IAErBE,WAbR,SAamBP,EAAOQ,GACdR,EAZGC,MAAAD,EAAAC,MAAYQ,OAAA,SAAAJ,GAAA,OAAAA,EAAAK,KAAAF,MAAAG,QAAA,CAIZC,WAJY,SAAAC,GAAA,IAAAC,EAAAC,EAAAd,EAAA,OAAAe,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAIZN,EAJYD,EAIZC,OAJYI,EAAAE,KAAA,EAAAJ,mBAAAK,MAKVrB,gBAAAA,GADFsB,WACgB,SAAAC,OALJ,KAAA,EAIZR,EAJYG,EAAAM,KAMfvB,EAAAc,EAAAU,KAAAC,IAAA,SAAAC,GAAA,OAAAC,cAAA,CAAAlB,GAAAiB,EAAAjB,IAAAiB,EAAAE,UAFGf,EAAA,WAAAb,GAJY,KAAA,EAAA,IAAA,MAAA,OAAAiB,EAAAY,WAST7B,QATS,SAAA8B,EASf1B,GATe,IAAAS,EAAAkB,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OASEf,EATF0B,EASE1B,OATF4B,EAAAb,KAAA,EAAAJ,mBAAAK,MAIZa,gBAAAA,GAAAZ,WAAA,SAAAa,IAAA9B,IAJY,KAAA,EAIZ2B,EAJYC,EAAAT,KAWnBjB,EAPO,UAAAqB,cAAA,CAAAlB,GAOIV,EAAOQ,IAPXH,IAJY,KAAA,EAAA,IAAA,MAAA,OAAA4B,EAAAH,WAYsBvB,WAZtB,SAAA6B,EAYsB5B,GAZtB,IAAAM,EAAA,OAAAE,mBAAAC,MAAA,SAAAoB,GAAA,OAAA,OAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,KAAA,EAAA,OAYsCZ,EAZtC4B,EAYsC5B,OAZtC6B,EAAAjB,KAAA,EAAAJ,mBAAAK,MAYfa,gBAAAA,GAAAZ,WAAA,SAAAK,IAAAnB,GAAA,UAZe,KAAA,EAalBM,EAAA,aAAAN,GAbkB,KAAA,EAAA,IAAA,MAAA,OAAA6B,EAAAP,YAgBblB,QAAAA,CADDX,MAAA,SAAAD,GAAA,OAAAA,EAAAC","file":"store.min.js","sourcesContent":["// src/store.js\r\n\r\nimport { createStore } from 'vuex';\r\nimport { db } from './firebaseConfig';\r\n\r\nexport default createStore({\r\n    state: {\r\n        users: []\r\n    },\r\n    mutations: {\r\n        setUsers(state, users) {\r\n            state.users = users;\r\n        },\r\n        addUser(state, user) {\r\n            state.users.push(user);\r\n        },\r\n        removeUser(state, userId) {\r\n            state.users = state.users.filter(user => user.id !== userId);\r\n        }\r\n    },\r\n    actions: {\r\n        async fetchUsers({ commit }) {\r\n            const snapshot = await db.collection('users').get();\r\n            const users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            commit('setUsers', users);\r\n        },\r\n        async addUser({ commit }, user) {\r\n            const docRef = await db.collection('users').add(user);\r\n            commit('addUser', { id: docRef.id, ...user });\r\n        },\r\n        async removeUser({ commit }, userId) {\r\n            await db.collection('users').doc(userId).delete();\r\n            commit('removeUser', userId);\r\n        }\r\n    },\r\n    getters: {\r\n        users: state => state.users\r\n    }\r\n});\r\n\r\n"]}